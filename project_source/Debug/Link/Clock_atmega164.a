;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;void DELAY_ms(unsigned int ms_count);
;void DELAY_us(unsigned int us_count);
;void init_timer0(void);
;void init_timer1(void);

	.DSEG
;void main(void)
; 0000 0013 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0014 
; 0000 0015 // Crystal Oscillator division factor: 1
; 0000 0016 #pragma optsize-
; 0000 0017 //in order to run the code at 8MHz we set CLKPR to divide by 1 in code
; 0000 0018 CLKPR=(1<<CLKPCE);//enable change of CLKPS bits
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0019 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 001A #ifdef _OPTIMIZE_SIZE_
; 0000 001B #pragma optsize+
; 0000 001C #endif
; 0000 001D 
; 0000 001E 
; 0000 001F // Input/Output Ports initialization
; 0000 0020 // Port A initialization
; 0000 0021 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0022 DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0023 // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
; 0000 0024 PORTA=(1<<PORTA7) | (1<<PORTA6) | (1<<PORTA5) | (1<<PORTA4) | (1<<PORTA3) | (1<<PORTA2) | (1<<PORTA1) | (1<<PORTA0);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0025 
; 0000 0026 // Port B initialization
; 0000 0027 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0028 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0029 // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
; 0000 002A PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 002B 
; 0000 002C // Port C initialization
; 0000 002D // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 002E DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 002F // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
; 0000 0030 PORTC=(1<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0031 
; 0000 0032 
; 0000 0033 // Port D initialization
; 0000 0034 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0035 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0036 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0037 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0038 
; 0000 0039 init_timer0(); //timer0 initialization for digit refresh
;PCODE: $00000022 VOL: 0
; 0000 003A init_timer1();
;PCODE: $00000023 VOL: 0
; 0000 003B // Globally enable interrupts
; 0000 003C #asm("sei")
;PCODE: $00000024 VOL: 0
; 0000 003D while (1)
;PCODE: $00000025 VOL: 0
; 0000 003E //with this function we initialize the buttons and by pressing them, we can setup the minutes and hours
; 0000 003F 
; 0000 0040 {
; 0000 0041 
; 0000 0042 
; 0000 0043 if(PINB & (1<<2))//it checks if PINB has value 1 on bit 1 and 2, it will return true for the if function
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0044 {
; 0000 0045 a1=0;//flag that checks if something happends or not
;PCODE: $00000029 VOL: 0
; 0000 0046 }
; 0000 0047 //PORTB is initialized with 1 on every bit
; 0000 0048 //PINB reads the values of every port in PORTB
; 0000 0049 if((a1==0) && (!(PINB & (1<<2)))) //check if the buttons changed their state
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 004A {
; 0000 004B 
; 0000 004C toggle=!toggle;//another flag
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 004D a1=1;//flag becomes 1
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 004E 
; 0000 004F }
; 0000 0050 
; 0000 0051 if(toggle==0) {
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0052 if(!(PINB & (1<<0)))//check if the button on the pin 0 has changed into an output state
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0053 {
; 0000 0054 minutes++;
;PCODE: $0000003F VOL: 1
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 1
; 0000 0055 delay_ms(500);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0056 if(minutes>=60)
;PCODE: $00000044 VOL: 1
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0057 {
; 0000 0058 minutes=0; //when there are 60 minutes, the hour digit will be turned to 1 and the minutes will start counting again from 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 1
; 0000 0059 hours++;
;PCODE: $00000049 VOL: 1
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 1
; 0000 005A }
; 0000 005B }
;PCODE: $0000004C VOL: 0
; 0000 005C if(!(PINB & (1<<1)))//check if the button on the pin 1 has changed into an output state
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 005D {
; 0000 005E hours++;
;PCODE: $00000051 VOL: 1
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 1
; 0000 005F delay_ms(500);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0060 if(hours>23)
;PCODE: $00000056 VOL: 1
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0061 {
; 0000 0062 hours=0;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 1
; 0000 0063 }
; 0000 0064 }
;PCODE: $0000005B VOL: 0
; 0000 0065 
; 0000 0066 }
;PCODE: $0000005C VOL: 0
; 0000 0067 
; 0000 0068 else
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0069 
; 0000 006A {
; 0000 006B if(!(PINB & (1<<0)))
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 006C {
; 0000 006D alarm_min++;
;PCODE: $00000062 VOL: 1
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 1
; 0000 006E delay_ms(500);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 006F if(alarm_min>=60)
;PCODE: $00000067 VOL: 1
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0070 {
; 0000 0071 alarm_min=0;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 1
; 0000 0072 alarm_hr++;
;PCODE: $0000006C VOL: 1
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 1
; 0000 0073 }
; 0000 0074 }
;PCODE: $0000006F VOL: 0
; 0000 0075 if(!(PINB & (1<<1)))
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0076 {
; 0000 0077 alarm_hr++;
;PCODE: $00000074 VOL: 1
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 1
; 0000 0078 delay_ms(500);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0079 if(alarm_hr>23)
;PCODE: $00000079 VOL: 1
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 007A {
; 0000 007B alarm_hr=0;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 1
; 0000 007C }
; 0000 007D }
;PCODE: $0000007E VOL: 0
; 0000 007E 
; 0000 007F }
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0080 
; 0000 0081 if(PINB & (1<<3))
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0082 {
; 0000 0083 a2=0;//alarm flag
;PCODE: $00000084 VOL: 0
; 0000 0084 }
; 0000 0085 
; 0000 0086 if((a2==0) && (!(PINB & (1<<3))))
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0087 {
; 0000 0088 
; 0000 0089 alarm=!alarm;
;PCODE: $0000008F VOL: 1
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 1
; 0000 008A a2=1;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 008B 
; 0000 008C }
; 0000 008D 
; 0000 008E 
; 0000 008F if(alarm==1)//when alarm is enabled
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 1
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0090 
; 0000 0091 {
; 0000 0092 
; 0000 0093 PORTD |=(1<<6); //alarm led on
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0094 
; 0000 0095 }
; 0000 0096 
; 0000 0097 else
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0098 
; 0000 0099 {
; 0000 009A 
; 0000 009B PORTD&=~(1<<6);  //when alarm is enabled
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 009C 
; 0000 009D }
;PCODE: $0000009E VOL: 0
; 0000 009E 
; 0000 009F }
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00A0 }
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;void init_timer0(void)
; 0000 00A5 {
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00A6 // Timer/Counter 0 initialization
; 0000 00A7 // Clock source: System Clock
; 0000 00A8 // Clock value: 31.250 kHz
; 0000 00A9 // Mode: CTC top=OCR0A
; 0000 00AA // OC0A output: Disconnected
; 0000 00AB // OC0B output: Disconnected
; 0000 00AC // Timer Period: 0.8 ms
; 0000 00AD // Control Register B for Timer/Counter-0 (Timer/Counter-0 is configured using two registers: A and B)
; 0000 00AE TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (1<<WGM01) | (0<<WGM00);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00AF TCCR0B=(0<<WGM02) | (1<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00B0 TCNT0=0x00;//TC0 counter value
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00B1 OCR0A=0xFF;//output compare register A
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00B2 OCR0B=0x00;//output compare register B
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00B3 // Timer/Counter 0 Interrupt(s) initialization
; 0000 00B4 TIMSK0=(0<<OCIE0B) | (1<<OCIE0A) | (0<<TOIE0);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00B5 }
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;void init_timer1(void)
; 0000 00B9 {
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00BA // Timer 1 initialization
; 0000 00BB // Clock source: System Clock
; 0000 00BC // Clock value: 31.250 kHz
; 0000 00BD // Mode: CTC top=OCR1A
; 0000 00BE // OC1A output: Disconnected
; 0000 00BF // OC1B output: Disconnected
; 0000 00C0 // Noise Canceler: Off
; 0000 00C1 // Input Capture on Falling Edge
; 0000 00C2 // Timer Period: 1 s
; 0000 00C3 // Timer1 Overflow Interrupt: On
; 0000 00C4 // Input Capture Interrupt: Off
; 0000 00C5 // Compare A Match Interrupt: Off
; 0000 00C6 // Compare B Match Interrupt: Off
; 0000 00C7 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00C8 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00C9 TCNT1H=0x00;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00CA TCNT1L=0x00;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00CB ICR1H=0x00;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00CC ICR1L=0x00;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00CD OCR1AH=0x7A;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00CE OCR1AL=0x12;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00CF OCR1BH=0x00;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00D0 OCR1BL=0x00;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00D1 // Timer/Counter 1 Interrupt(s) initialization
; 0000 00D2 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (1<<OCIE1A) | (0<<TOIE1);
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00D3 }
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;interrupt [17] void timer0_compa_isr(void)
; 0000 00D8 {
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00D9 
; 0000 00DA PORTA=0x00;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00DB PORTC=0x00;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00DC DELAY_us(50);
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00DD 
; 0000 00DE //port A da tensiune pe pinii declarati in array-ul hexvalue de pe pozitia restului impartirii secundelor la 10
; 0000 00DF if(toggle==0)
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00E0 {
; 0000 00E1 
; 0000 00E2 switch (current_digit)
;PCODE: $000000D9 VOL: 0
; 0000 00E3 {
; 0000 00E4 case 1:
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00E5 PORTA = hexvalue[seconds%10];
;PCODE: $000000DD VOL: 1
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00E6 //DigitTo7SegEncoder(seconds%10,commonn);
; 0000 00E7 PORTC=0b00000001;//da tensiune pe pinul C0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00E8 break;
;PCODE: $000000E6 VOL: 0
; 0000 00E9 
; 0000 00EA case 2:
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00EB PORTA = hexvalue[(seconds/10)%10];
;PCODE: $000000EB VOL: 1
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00EC //DigitTo7SegEncoder((seconds/10)%10,commonn);
; 0000 00ED PORTC=0b00000010;//da tensiune pe pinul C1
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00EE break;
;PCODE: $000000F7 VOL: 0
; 0000 00EF case 3:
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00F0 PORTA = hexvalue[minutes%10];
;PCODE: $000000FC VOL: 1
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00F1 //DigitTo7SegEncoder((seconds/10)%10,commonn);
; 0000 00F2 PORTC=0b00000100;//da tensiune pe pinul C2
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00F3 break;
;PCODE: $00000105 VOL: 0
; 0000 00F4 case 4:
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00F5 PORTA = hexvalue[(minutes/10)%10];
;PCODE: $0000010A VOL: 1
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00F6 //DigitTo7SegEncoder((seconds/10)%10,commonn);
; 0000 00F7 PORTC=0b00001000;//da tensiune pe pinul C3
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00F8 break;
;PCODE: $00000116 VOL: 0
; 0000 00F9 case 5:
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00FA PORTA = hexvalue[hours%10];
;PCODE: $0000011B VOL: 1
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00FB //DigitTo7SegEncoder((seconds/10)%10,commonn);
; 0000 00FC PORTC=0b00010000;//da tensiune pe pinul C4
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00FD break;
;PCODE: $00000124 VOL: 0
; 0000 00FE case 6:
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00FF PORTA = hexvalue[(hours/10)%10];
;PCODE: $00000129 VOL: 1
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 0100 //DigitTo7SegEncoder((seconds/10)%10,commonn);
; 0000 0101 PORTC=0b00100000;//da tensiune pe pinul C5
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 0102 break;
;PCODE: $00000135 VOL: 0
; 0000 0103 
; 0000 0104 }
;PCODE: $00000136 VOL: 0
; 0000 0105 current_digit = (current_digit % 7) + 1;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 0106 }
; 0000 0107 
; 0000 0108 
; 0000 0109 
; 0000 010A else
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 010B {
; 0000 010C 
; 0000 010D switch (current_digit)
;PCODE: $0000013E VOL: 0
; 0000 010E {
; 0000 010F case 1:
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 0110 PORTA = hexvalue[alarm_sec%10];
;PCODE: $00000142 VOL: 1
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 0111 //DigitTo7SegEncoder(seconds%10,commonn);
; 0000 0112 PORTC=0b00000001;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 0113 break;
;PCODE: $0000014B VOL: 0
; 0000 0114 
; 0000 0115 case 2:
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 0116 PORTA = hexvalue[(alarm_sec/10)%10];
;PCODE: $00000150 VOL: 1
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 0117 //DigitTo7SegEncoder((seconds/10)%10,commonn);
; 0000 0118 PORTC=0b00000010;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 0119 break;
;PCODE: $0000015C VOL: 0
; 0000 011A case 3:
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 011B PORTA = hexvalue[alarm_min%10];
;PCODE: $00000161 VOL: 1
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 011C //DigitTo7SegEncoder((seconds/10)%10,commonn);
; 0000 011D PORTC=0b00000100;
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 011E break;
;PCODE: $0000016A VOL: 0
; 0000 011F case 4:
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 0120 PORTA = hexvalue[(alarm_min/10)%10];
;PCODE: $0000016F VOL: 1
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 0121 //DigitTo7SegEncoder((seconds/10)%10,commonn);
; 0000 0122 PORTC=0b00001000;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 0123 break;
;PCODE: $0000017B VOL: 0
; 0000 0124 case 5:
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 0125 PORTA = hexvalue[alarm_hr%10];
;PCODE: $00000180 VOL: 1
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 0126 //DigitTo7SegEncoder((seconds/10)%10,commonn);
; 0000 0127 PORTC=0b00010000;
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 0128 break;
;PCODE: $00000189 VOL: 0
; 0000 0129 case 6:
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 012A PORTA = hexvalue[(alarm_hr/10)%10];
;PCODE: $0000018E VOL: 1
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 012B //DigitTo7SegEncoder((seconds/10)%10,commonn);
; 0000 012C PORTC=0b00100000;
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 012D break;
;PCODE: $0000019A VOL: 0
; 0000 012E 
; 0000 012F }
;PCODE: $0000019B VOL: 0
; 0000 0130 current_digit = (current_digit % 7) + 1;
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 0131 
; 0000 0132 
; 0000 0133 
; 0000 0134 }
;PCODE: $000001A1 VOL: 0
; 0000 0135 
; 0000 0136 }
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;void DELAY_ms(unsigned int ms_count)
; 0000 013A {
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 013B unsigned int i,j;
; 0000 013C for(i=0; i<ms_count; i++)
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;	ms_count -> R20,R21
;	i -> R16,R17
;	j -> R18,R19
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 013D 
; 0000 013E {
; 0000 013F for(j=0;j<1000; j++);
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 0140 }
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 0141 }
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;void DELAY_us(unsigned int us_count)
; 0000 0143 {
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 0144 unsigned int i1;
; 0000 0145 for(i1=0; i1<us_count; i1++);
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;	us_count -> R18,R19
;	i1 -> R16,R17
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 0146 
; 0000 0147 
; 0000 0148 }
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;interrupt [14] void timer1_ovf_isr(void)
; 0000 014D {
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 014E 
; 0000 014F seconds++;
;PCODE: $000001E1 VOL: 1
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 1
; 0000 0150 
; 0000 0151 if(seconds>=60)
;PCODE: $000001E4 VOL: 1
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 0152 {
; 0000 0153 minutes++;
;PCODE: $000001E7 VOL: 1
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 1
; 0000 0154 seconds=0;
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 1
; 0000 0155 
; 0000 0156 }
; 0000 0157 if(minutes>=60)
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 1
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 0158 {
; 0000 0159 hours++;
;PCODE: $000001F0 VOL: 1
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 1
; 0000 015A minutes=0;
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 1
; 0000 015B 
; 0000 015C }
; 0000 015D if(hours>23)
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 1
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 015E {
; 0000 015F hours=0;
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 1
; 0000 0160 //minutes=0;
; 0000 0161 //seconds=0;
; 0000 0162 
; 0000 0163 }
; 0000 0164 
; 0000 0165 
; 0000 0166 }
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
