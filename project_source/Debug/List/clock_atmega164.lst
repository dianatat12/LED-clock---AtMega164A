
AVRASM ver. 2.1.30  D:\Documente\facultate\anul 3\sem 2\Microcontrolers\proiect\cod_proiect\Debug\List\clock_atmega164.asm Mon Jun 20 11:29:44 2022

D:\Documente\facultate\anul 3\sem 2\Microcontrolers\proiect\cod_proiect\Debug\List\clock_atmega164.asm(1420): warning: Register r4 already defined by the .DEF directive
D:\Documente\facultate\anul 3\sem 2\Microcontrolers\proiect\cod_proiect\Debug\List\clock_atmega164.asm(1421): warning: Register r3 already defined by the .DEF directive
D:\Documente\facultate\anul 3\sem 2\Microcontrolers\proiect\cod_proiect\Debug\List\clock_atmega164.asm(1422): warning: Register r6 already defined by the .DEF directive
D:\Documente\facultate\anul 3\sem 2\Microcontrolers\proiect\cod_proiect\Debug\List\clock_atmega164.asm(1423): warning: Register r7 already defined by the .DEF directive
D:\Documente\facultate\anul 3\sem 2\Microcontrolers\proiect\cod_proiect\Debug\List\clock_atmega164.asm(1424): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.48b Evaluation
                 ;(C) Copyright 1998-2022 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega164A
                 ;Program type           : Application
                 ;Clock frequency        : 8,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega164A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPMCSR=0x37
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x04FF
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 	.EQU __EEPROM_PAGE_SIZE=0x04
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _a1=R4
                 	.DEF _a2=R3
                 	.DEF _toggle=R6
                 	.DEF _current_digit=R7
                 	.DEF _current_digit_msb=R8
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 01bd 	JMP  _timer1_ovf_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 011c 	JMP  _timer0_compa_isr
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00003e 0000
00003f 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x3:
000040 063f
000041 4f5b
000042 6d66
000043 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
000044 6f7f      	.DB  0x7F,0x6F
                 
                 __GLOBAL_INI_TBL:
000045 0004      	.DW  0x04
000046 0003      	.DW  0x03
000047 007c      	.DW  __REG_VARS*2
                 
000048 000a      	.DW  0x0A
000049 0207      	.DW  _hexvalue
00004a 0080      	.DW  _0x3*2
                 
                 _0xFFFFFFFF:
00004b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00004c 94f8      	CLI
00004d 27ee      	CLR  R30
00004e bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004f e0f1      	LDI  R31,1
000050 bff5      	OUT  MCUCR,R31
000051 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000052 e08d      	LDI  R24,(14-2)+1
000053 e0a2      	LDI  R26,2
000054 27bb      	CLR  R27
                 __CLEAR_REG:
000055 93ed      	ST   X+,R30
000056 958a      	DEC  R24
000057 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000058 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000059 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005a e0a0      	LDI  R26,LOW(__SRAM_START)
00005b e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00005c 93ed      	ST   X+,R30
00005d 9701      	SBIW R24,1
00005e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005f e8ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000060 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000061 9185      	LPM  R24,Z+
000062 9195      	LPM  R25,Z+
000063 9700      	SBIW R24,0
000064 f061      	BREQ __GLOBAL_INI_END
000065 91a5      	LPM  R26,Z+
000066 91b5      	LPM  R27,Z+
000067 9005      	LPM  R0,Z+
000068 9015      	LPM  R1,Z+
000069 01bf      	MOVW R22,R30
00006a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006b 9005      	LPM  R0,Z+
00006c 920d      	ST   X+,R0
00006d 9701      	SBIW R24,1
00006e f7e1      	BRNE __GLOBAL_INI_LOOP
00006f 01fb      	MOVW R30,R22
000070 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000071 e0e0      	LDI  R30,__GPIOR0_INIT
000072 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000073 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000074 bfed      	OUT  SPL,R30
000075 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000076 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000077 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000078 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000079 940c 007b 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x200
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;void DELAY_ms(unsigned int ms_count);
                 ;void DELAY_us(unsigned int us_count);
                 ;void init_timer0(void);
                 ;void init_timer1(void);
                 
                 	.DSEG
                 ;void main(void)
                 ; 0000 0013 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0014 
                 ; 0000 0015 // Crystal Oscillator division factor: 1
                 ; 0000 0016 #pragma optsize-
                 ; 0000 0017 //in order to run the code at 8MHz we set CLKPR to divide by 1 in code
                 ; 0000 0018 CLKPR=(1<<CLKPCE);//enable change of CLKPS bits
00007b e8e0      	LDI  R30,LOW(128)
00007c 93e0 0061 	STS  97,R30
                 ; 0000 0019 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
00007e e0e0      	LDI  R30,LOW(0)
00007f 93e0 0061 	STS  97,R30
                 ; 0000 001A #ifdef _OPTIMIZE_SIZE_
                 ; 0000 001B #pragma optsize+
                 ; 0000 001C #endif
                 ; 0000 001D 
                 ; 0000 001E 
                 ; 0000 001F // Input/Output Ports initialization
                 ; 0000 0020 // Port A initialization
                 ; 0000 0021 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0022 DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
000081 efef      	LDI  R30,LOW(255)
000082 b9e1      	OUT  0x1,R30
                 ; 0000 0023 // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
                 ; 0000 0024 PORTA=(1<<PORTA7) | (1<<PORTA6) | (1<<PORTA5) | (1<<PORTA4) | (1<<PORTA3) | (1<<PORTA2) | (1<<PORTA1) | (1<<PORTA0);
000083 b9e2      	OUT  0x2,R30
                 ; 0000 0025 
                 ; 0000 0026 // Port B initialization
                 ; 0000 0027 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0028 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000084 e0e0      	LDI  R30,LOW(0)
000085 b9e4      	OUT  0x4,R30
                 ; 0000 0029 // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
                 ; 0000 002A PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
000086 efef      	LDI  R30,LOW(255)
000087 b9e5      	OUT  0x5,R30
                 ; 0000 002B 
                 ; 0000 002C // Port C initialization
                 ; 0000 002D // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 002E DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
000088 b9e7      	OUT  0x7,R30
                 ; 0000 002F // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
                 ; 0000 0030 PORTC=(1<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
000089 b9e8      	OUT  0x8,R30
                 ; 0000 0031 
                 ; 0000 0032 
                 ; 0000 0033 // Port D initialization
                 ; 0000 0034 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0035 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
00008a b9ea      	OUT  0xA,R30
                 ; 0000 0036 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0037 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00008b e0e0      	LDI  R30,LOW(0)
00008c b9eb      	OUT  0xB,R30
                 ; 0000 0038 
                 ; 0000 0039 init_timer0(); //timer0 initialization for digit refresh
00008d d062      	RCALL _init_timer0
                 ; 0000 003A init_timer1();
00008e d06f      	RCALL _init_timer1
                 ; 0000 003B // Globally enable interrupts
                 ; 0000 003C #asm("sei")
00008f 9478      	SEI
                 ; 0000 003D while (1)
                 _0x4:
                 ; 0000 003E //with this function we initialize the buttons and by pressing them, we can setup the minutes and hours
                 ; 0000 003F 
                 ; 0000 0040 {
                 ; 0000 0041 
                 ; 0000 0042 
                 ; 0000 0043 if(PINB & (1<<2))//it checks if PINB has value 1 on bit 1 and 2, it will return true for the if function
000090 991a      	SBIC 0x3,2
                 ; 0000 0044 {
                 ; 0000 0045 a1=0;//flag that checks if something happends or not
000091 2444      	CLR  R4
                 ; 0000 0046 }
                 ; 0000 0047 //PORTB is initialized with 1 on every bit
                 ; 0000 0048 //PINB reads the values of every port in PORTB
                 ; 0000 0049 if((a1==0) && (!(PINB & (1<<2)))) //check if the buttons changed their state
000092 2044      	TST  R4
000093 f411      	BRNE _0x9
000094 9b1a      	SBIS 0x3,2
000095 c001      	RJMP _0xA
                 _0x9:
000096 c005      	RJMP _0x8
                 _0xA:
                 ; 0000 004A {
                 ; 0000 004B 
                 ; 0000 004C toggle=!toggle;//another flag
000097 2de6      	MOV  R30,R6
000098 d149      	RCALL SUBOPT_0x0
000099 2e6e      	MOV  R6,R30
                 ; 0000 004D a1=1;//flag becomes 1
00009a e0e1      	LDI  R30,LOW(1)
00009b 2e4e      	MOV  R4,R30
                 ; 0000 004E 
                 ; 0000 004F }
                 ; 0000 0050 
                 ; 0000 0051 if(toggle==0) {
                 _0x8:
00009c 2066      	TST  R6
00009d f4e1      	BRNE _0xB
                 ; 0000 0052 if(!(PINB & (1<<0)))//check if the button on the pin 0 has changed into an output state
00009e 9918      	SBIC 0x3,0
00009f c00c      	RJMP _0xC
                 ; 0000 0053 {
                 ; 0000 0054 minutes++;
0000a0 d146      	RCALL SUBOPT_0x1
                 ; 0000 0055 delay_ms(500);
0000a1 efa4      	LDI  R26,LOW(500)
0000a2 e0b1      	LDI  R27,HIGH(500)
0000a3 d1b3      	RCALL _delay_ms
                 ; 0000 0056 if(minutes>=60)
0000a4 91a0 0201 	LDS  R26,_minutes
0000a6 33ac      	CPI  R26,LOW(0x3C)
0000a7 f020      	BRLO _0xD
                 ; 0000 0057 {
                 ; 0000 0058 minutes=0; //when there are 60 minutes, the hour digit will be turned to 1 and the minutes will start counting again from 0
0000a8 e0e0      	LDI  R30,LOW(0)
0000a9 93e0 0201 	STS  _minutes,R30
                 ; 0000 0059 hours++;
0000ab d141      	RCALL SUBOPT_0x2
                 ; 0000 005A }
                 ; 0000 005B }
                 _0xD:
                 ; 0000 005C if(!(PINB & (1<<1)))//check if the button on the pin 1 has changed into an output state
                 _0xC:
0000ac 9919      	SBIC 0x3,1
0000ad c00b      	RJMP _0xE
                 ; 0000 005D {
                 ; 0000 005E hours++;
0000ae d13e      	RCALL SUBOPT_0x2
                 ; 0000 005F delay_ms(500);
0000af efa4      	LDI  R26,LOW(500)
0000b0 e0b1      	LDI  R27,HIGH(500)
0000b1 d1a5      	RCALL _delay_ms
                 ; 0000 0060 if(hours>23)
0000b2 91a0 0202 	LDS  R26,_hours
0000b4 31a8      	CPI  R26,LOW(0x18)
0000b5 f018      	BRLO _0xF
                 ; 0000 0061 {
                 ; 0000 0062 hours=0;
0000b6 e0e0      	LDI  R30,LOW(0)
0000b7 93e0 0202 	STS  _hours,R30
                 ; 0000 0063 }
                 ; 0000 0064 }
                 _0xF:
                 ; 0000 0065 
                 ; 0000 0066 }
                 _0xE:
                 ; 0000 0067 
                 ; 0000 0068 else
0000b9 c01f      	RJMP _0x10
                 _0xB:
                 ; 0000 0069 
                 ; 0000 006A {
                 ; 0000 006B if(!(PINB & (1<<0)))
0000ba 9918      	SBIC 0x3,0
0000bb c010      	RJMP _0x11
                 ; 0000 006C {
                 ; 0000 006D alarm_min++;
0000bc 91e0 0204 	LDS  R30,_alarm_min
0000be 5fef      	SUBI R30,-LOW(1)
0000bf 93e0 0204 	STS  _alarm_min,R30
                 ; 0000 006E delay_ms(500);
0000c1 efa4      	LDI  R26,LOW(500)
0000c2 e0b1      	LDI  R27,HIGH(500)
0000c3 d193      	RCALL _delay_ms
                 ; 0000 006F if(alarm_min>=60)
0000c4 91a0 0204 	LDS  R26,_alarm_min
0000c6 33ac      	CPI  R26,LOW(0x3C)
0000c7 f020      	BRLO _0x12
                 ; 0000 0070 {
                 ; 0000 0071 alarm_min=0;
0000c8 e0e0      	LDI  R30,LOW(0)
0000c9 93e0 0204 	STS  _alarm_min,R30
                 ; 0000 0072 alarm_hr++;
0000cb d127      	RCALL SUBOPT_0x3
                 ; 0000 0073 }
                 ; 0000 0074 }
                 _0x12:
                 ; 0000 0075 if(!(PINB & (1<<1)))
                 _0x11:
0000cc 9919      	SBIC 0x3,1
0000cd c00b      	RJMP _0x13
                 ; 0000 0076 {
                 ; 0000 0077 alarm_hr++;
0000ce d124      	RCALL SUBOPT_0x3
                 ; 0000 0078 delay_ms(500);
0000cf efa4      	LDI  R26,LOW(500)
0000d0 e0b1      	LDI  R27,HIGH(500)
0000d1 d185      	RCALL _delay_ms
                 ; 0000 0079 if(alarm_hr>23)
0000d2 91a0 0203 	LDS  R26,_alarm_hr
0000d4 31a8      	CPI  R26,LOW(0x18)
0000d5 f018      	BRLO _0x14
                 ; 0000 007A {
                 ; 0000 007B alarm_hr=0;
0000d6 e0e0      	LDI  R30,LOW(0)
0000d7 93e0 0203 	STS  _alarm_hr,R30
                 ; 0000 007C }
                 ; 0000 007D }
                 _0x14:
                 ; 0000 007E 
                 ; 0000 007F }
                 _0x13:
                 _0x10:
                 ; 0000 0080 
                 ; 0000 0081 if(PINB & (1<<3))
0000d9 991b      	SBIC 0x3,3
                 ; 0000 0082 {
                 ; 0000 0083 a2=0;//alarm flag
0000da 2433      	CLR  R3
                 ; 0000 0084 }
                 ; 0000 0085 
                 ; 0000 0086 if((a2==0) && (!(PINB & (1<<3))))
0000db 2033      	TST  R3
0000dc f411      	BRNE _0x17
0000dd 9b1b      	SBIS 0x3,3
0000de c001      	RJMP _0x18
                 _0x17:
0000df c007      	RJMP _0x16
                 _0x18:
                 ; 0000 0087 {
                 ; 0000 0088 
                 ; 0000 0089 alarm=!alarm;
0000e0 91e0 0206 	LDS  R30,_alarm
0000e2 d0ff      	RCALL SUBOPT_0x0
0000e3 93e0 0206 	STS  _alarm,R30
                 ; 0000 008A a2=1;
0000e5 e0e1      	LDI  R30,LOW(1)
0000e6 2e3e      	MOV  R3,R30
                 ; 0000 008B 
                 ; 0000 008C }
                 ; 0000 008D 
                 ; 0000 008E 
                 ; 0000 008F if(alarm==1)//when alarm is enabled
                 _0x16:
0000e7 91a0 0206 	LDS  R26,_alarm
0000e9 30a1      	CPI  R26,LOW(0x1)
0000ea f411      	BRNE _0x19
                 ; 0000 0090 
                 ; 0000 0091 {
                 ; 0000 0092 
                 ; 0000 0093 PORTD |=(1<<6); //alarm led on
0000eb 9a5e      	SBI  0xB,6
                 ; 0000 0094 
                 ; 0000 0095 }
                 ; 0000 0096 
                 ; 0000 0097 else
0000ec c001      	RJMP _0x1A
                 _0x19:
                 ; 0000 0098 
                 ; 0000 0099 {
                 ; 0000 009A 
                 ; 0000 009B PORTD&=~(1<<6);  //when alarm is enabled
0000ed 985e      	CBI  0xB,6
                 ; 0000 009C 
                 ; 0000 009D }
                 _0x1A:
                 ; 0000 009E 
                 ; 0000 009F }
0000ee cfa1      	RJMP _0x4
                 ; 0000 00A0 }
                 _0x1B:
0000ef cfff      	RJMP _0x1B
                 ; .FEND
                 ;void init_timer0(void)
                 ; 0000 00A5 {
                 _init_timer0:
                 ; .FSTART _init_timer0
                 ; 0000 00A6 // Timer/Counter 0 initialization
                 ; 0000 00A7 // Clock source: System Clock
                 ; 0000 00A8 // Clock value: 31.250 kHz
                 ; 0000 00A9 // Mode: CTC top=OCR0A
                 ; 0000 00AA // OC0A output: Disconnected
                 ; 0000 00AB // OC0B output: Disconnected
                 ; 0000 00AC // Timer Period: 0.8 ms
                 ; 0000 00AD // Control Register B for Timer/Counter-0 (Timer/Counter-0 is configured using two registers: A and B)
                 ; 0000 00AE TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (1<<WGM01) | (0<<WGM00);
0000f0 e0e2      	LDI  R30,LOW(2)
0000f1 bde4      	OUT  0x24,R30
                 ; 0000 00AF TCCR0B=(0<<WGM02) | (1<<CS02) | (0<<CS01) | (0<<CS00);
0000f2 e0e4      	LDI  R30,LOW(4)
0000f3 bde5      	OUT  0x25,R30
                 ; 0000 00B0 TCNT0=0x00;//TC0 counter value
0000f4 e0e0      	LDI  R30,LOW(0)
0000f5 bde6      	OUT  0x26,R30
                 ; 0000 00B1 OCR0A=0xFF;//output compare register A
0000f6 efef      	LDI  R30,LOW(255)
0000f7 bde7      	OUT  0x27,R30
                 ; 0000 00B2 OCR0B=0x00;//output compare register B
0000f8 e0e0      	LDI  R30,LOW(0)
0000f9 bde8      	OUT  0x28,R30
                 ; 0000 00B3 // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 00B4 TIMSK0=(0<<OCIE0B) | (1<<OCIE0A) | (0<<TOIE0);
0000fa e0e2      	LDI  R30,LOW(2)
0000fb 93e0 006e 	STS  110,R30
                 ; 0000 00B5 }
0000fd 9508      	RET
                 ; .FEND
                 ;void init_timer1(void)
                 ; 0000 00B9 {
                 _init_timer1:
                 ; .FSTART _init_timer1
                 ; 0000 00BA // Timer 1 initialization
                 ; 0000 00BB // Clock source: System Clock
                 ; 0000 00BC // Clock value: 31.250 kHz
                 ; 0000 00BD // Mode: CTC top=OCR1A
                 ; 0000 00BE // OC1A output: Disconnected
                 ; 0000 00BF // OC1B output: Disconnected
                 ; 0000 00C0 // Noise Canceler: Off
                 ; 0000 00C1 // Input Capture on Falling Edge
                 ; 0000 00C2 // Timer Period: 1 s
                 ; 0000 00C3 // Timer1 Overflow Interrupt: On
                 ; 0000 00C4 // Input Capture Interrupt: Off
                 ; 0000 00C5 // Compare A Match Interrupt: Off
                 ; 0000 00C6 // Compare B Match Interrupt: Off
                 ; 0000 00C7 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000fe e0e0      	LDI  R30,LOW(0)
0000ff 93e0 0080 	STS  128,R30
                 ; 0000 00C8 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
000101 e0ec      	LDI  R30,LOW(12)
000102 93e0 0081 	STS  129,R30
                 ; 0000 00C9 TCNT1H=0x00;
000104 e0e0      	LDI  R30,LOW(0)
000105 93e0 0085 	STS  133,R30
                 ; 0000 00CA TCNT1L=0x00;
000107 93e0 0084 	STS  132,R30
                 ; 0000 00CB ICR1H=0x00;
000109 93e0 0087 	STS  135,R30
                 ; 0000 00CC ICR1L=0x00;
00010b 93e0 0086 	STS  134,R30
                 ; 0000 00CD OCR1AH=0x7A;
00010d e7ea      	LDI  R30,LOW(122)
00010e 93e0 0089 	STS  137,R30
                 ; 0000 00CE OCR1AL=0x12;
000110 e1e2      	LDI  R30,LOW(18)
000111 93e0 0088 	STS  136,R30
                 ; 0000 00CF OCR1BH=0x00;
000113 e0e0      	LDI  R30,LOW(0)
000114 93e0 008b 	STS  139,R30
                 ; 0000 00D0 OCR1BL=0x00;
000116 93e0 008a 	STS  138,R30
                 ; 0000 00D1 // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 00D2 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (1<<OCIE1A) | (0<<TOIE1);
000118 e0e2      	LDI  R30,LOW(2)
000119 93e0 006f 	STS  111,R30
                 ; 0000 00D3 }
00011b 9508      	RET
                 ; .FEND
                 ;interrupt [17] void timer0_compa_isr(void)
                 ; 0000 00D8 {
                 _timer0_compa_isr:
                 ; .FSTART _timer0_compa_isr
00011c 920a      	ST   -Y,R0
00011d 921a      	ST   -Y,R1
00011e 92fa      	ST   -Y,R15
00011f 936a      	ST   -Y,R22
000120 937a      	ST   -Y,R23
000121 938a      	ST   -Y,R24
000122 939a      	ST   -Y,R25
000123 93aa      	ST   -Y,R26
000124 93ba      	ST   -Y,R27
000125 93ea      	ST   -Y,R30
000126 93fa      	ST   -Y,R31
000127 b7ef      	IN   R30,SREG
000128 93ea      	ST   -Y,R30
                 ; 0000 00D9 
                 ; 0000 00DA PORTA=0x00;
000129 e0e0      	LDI  R30,LOW(0)
00012a b9e2      	OUT  0x2,R30
                 ; 0000 00DB PORTC=0x00;
00012b b9e8      	OUT  0x8,R30
                 ; 0000 00DC DELAY_us(50);
00012c e3a2      	LDI  R26,LOW(50)
00012d e0b0      	LDI  R27,0
00012e d081      	RCALL _DELAY_us
                 ; 0000 00DD 
                 ; 0000 00DE //port A da tensiune pe pinii declarati in array-ul hexvalue de pe pozitia restului impartirii secundelor la 10
                 ; 0000 00DF if(toggle==0)
00012f 2066      	TST  R6
000130 f5a9      	BRNE _0x1C
                 ; 0000 00E0 {
                 ; 0000 00E1 
                 ; 0000 00E2 switch (current_digit)
000131 d0c7      	RCALL SUBOPT_0x4
                 ; 0000 00E3 {
                 ; 0000 00E4 case 1:
000132 f429      	BRNE _0x20
                 ; 0000 00E5 PORTA = hexvalue[seconds%10];
000133 91a0 0200 	LDS  R26,_seconds
000135 d0c9      	RCALL SUBOPT_0x5
                 ; 0000 00E6 //DigitTo7SegEncoder(seconds%10,commonn);
                 ; 0000 00E7 PORTC=0b00000001;//da tensiune pe pinul C0
000136 e0e1      	LDI  R30,LOW(1)
000137 c02c      	RJMP _0x3C
                 ; 0000 00E8 break;
                 ; 0000 00E9 
                 ; 0000 00EA case 2:
                 _0x20:
000138 30e2      	CPI  R30,LOW(0x2)
000139 e0a0      	LDI  R26,HIGH(0x2)
00013a 07fa      	CPC  R31,R26
00013b f429      	BRNE _0x21
                 ; 0000 00EB PORTA = hexvalue[(seconds/10)%10];
00013c 91a0 0200 	LDS  R26,_seconds
00013e d0c9      	RCALL SUBOPT_0x6
                 ; 0000 00EC //DigitTo7SegEncoder((seconds/10)%10,commonn);
                 ; 0000 00ED PORTC=0b00000010;//da tensiune pe pinul C1
00013f e0e2      	LDI  R30,LOW(2)
000140 c023      	RJMP _0x3C
                 ; 0000 00EE break;
                 ; 0000 00EF case 3:
                 _0x21:
000141 30e3      	CPI  R30,LOW(0x3)
000142 e0a0      	LDI  R26,HIGH(0x3)
000143 07fa      	CPC  R31,R26
000144 f429      	BRNE _0x22
                 ; 0000 00F0 PORTA = hexvalue[minutes%10];
000145 91a0 0201 	LDS  R26,_minutes
000147 d0b7      	RCALL SUBOPT_0x5
                 ; 0000 00F1 //DigitTo7SegEncoder((seconds/10)%10,commonn);
                 ; 0000 00F2 PORTC=0b00000100;//da tensiune pe pinul C2
000148 e0e4      	LDI  R30,LOW(4)
000149 c01a      	RJMP _0x3C
                 ; 0000 00F3 break;
                 ; 0000 00F4 case 4:
                 _0x22:
00014a 30e4      	CPI  R30,LOW(0x4)
00014b e0a0      	LDI  R26,HIGH(0x4)
00014c 07fa      	CPC  R31,R26
00014d f429      	BRNE _0x23
                 ; 0000 00F5 PORTA = hexvalue[(minutes/10)%10];
00014e 91a0 0201 	LDS  R26,_minutes
000150 d0b7      	RCALL SUBOPT_0x6
                 ; 0000 00F6 //DigitTo7SegEncoder((seconds/10)%10,commonn);
                 ; 0000 00F7 PORTC=0b00001000;//da tensiune pe pinul C3
000151 e0e8      	LDI  R30,LOW(8)
000152 c011      	RJMP _0x3C
                 ; 0000 00F8 break;
                 ; 0000 00F9 case 5:
                 _0x23:
000153 30e5      	CPI  R30,LOW(0x5)
000154 e0a0      	LDI  R26,HIGH(0x5)
000155 07fa      	CPC  R31,R26
000156 f429      	BRNE _0x24
                 ; 0000 00FA PORTA = hexvalue[hours%10];
000157 91a0 0202 	LDS  R26,_hours
000159 d0a5      	RCALL SUBOPT_0x5
                 ; 0000 00FB //DigitTo7SegEncoder((seconds/10)%10,commonn);
                 ; 0000 00FC PORTC=0b00010000;//da tensiune pe pinul C4
00015a e1e0      	LDI  R30,LOW(16)
00015b c008      	RJMP _0x3C
                 ; 0000 00FD break;
                 ; 0000 00FE case 6:
                 _0x24:
00015c 30e6      	CPI  R30,LOW(0x6)
00015d e0a0      	LDI  R26,HIGH(0x6)
00015e 07fa      	CPC  R31,R26
00015f f429      	BRNE _0x1F
                 ; 0000 00FF PORTA = hexvalue[(hours/10)%10];
000160 91a0 0202 	LDS  R26,_hours
000162 d0a5      	RCALL SUBOPT_0x6
                 ; 0000 0100 //DigitTo7SegEncoder((seconds/10)%10,commonn);
                 ; 0000 0101 PORTC=0b00100000;//da tensiune pe pinul C5
000163 e2e0      	LDI  R30,LOW(32)
                 _0x3C:
000164 b9e8      	OUT  0x8,R30
                 ; 0000 0102 break;
                 ; 0000 0103 
                 ; 0000 0104 }
                 _0x1F:
                 ; 0000 0105 current_digit = (current_digit % 7) + 1;
000165 c034      	RJMP _0x3D
                 ; 0000 0106 }
                 ; 0000 0107 
                 ; 0000 0108 
                 ; 0000 0109 
                 ; 0000 010A else
                 _0x1C:
                 ; 0000 010B {
                 ; 0000 010C 
                 ; 0000 010D switch (current_digit)
000166 d092      	RCALL SUBOPT_0x4
                 ; 0000 010E {
                 ; 0000 010F case 1:
000167 f429      	BRNE _0x2A
                 ; 0000 0110 PORTA = hexvalue[alarm_sec%10];
000168 91a0 0205 	LDS  R26,_alarm_sec
00016a d094      	RCALL SUBOPT_0x5
                 ; 0000 0111 //DigitTo7SegEncoder(seconds%10,commonn);
                 ; 0000 0112 PORTC=0b00000001;
00016b e0e1      	LDI  R30,LOW(1)
00016c c02c      	RJMP _0x3E
                 ; 0000 0113 break;
                 ; 0000 0114 
                 ; 0000 0115 case 2:
                 _0x2A:
00016d 30e2      	CPI  R30,LOW(0x2)
00016e e0a0      	LDI  R26,HIGH(0x2)
00016f 07fa      	CPC  R31,R26
000170 f429      	BRNE _0x2B
                 ; 0000 0116 PORTA = hexvalue[(alarm_sec/10)%10];
000171 91a0 0205 	LDS  R26,_alarm_sec
000173 d094      	RCALL SUBOPT_0x6
                 ; 0000 0117 //DigitTo7SegEncoder((seconds/10)%10,commonn);
                 ; 0000 0118 PORTC=0b00000010;
000174 e0e2      	LDI  R30,LOW(2)
000175 c023      	RJMP _0x3E
                 ; 0000 0119 break;
                 ; 0000 011A case 3:
                 _0x2B:
000176 30e3      	CPI  R30,LOW(0x3)
000177 e0a0      	LDI  R26,HIGH(0x3)
000178 07fa      	CPC  R31,R26
000179 f429      	BRNE _0x2C
                 ; 0000 011B PORTA = hexvalue[alarm_min%10];
00017a 91a0 0204 	LDS  R26,_alarm_min
00017c d082      	RCALL SUBOPT_0x5
                 ; 0000 011C //DigitTo7SegEncoder((seconds/10)%10,commonn);
                 ; 0000 011D PORTC=0b00000100;
00017d e0e4      	LDI  R30,LOW(4)
00017e c01a      	RJMP _0x3E
                 ; 0000 011E break;
                 ; 0000 011F case 4:
                 _0x2C:
00017f 30e4      	CPI  R30,LOW(0x4)
000180 e0a0      	LDI  R26,HIGH(0x4)
000181 07fa      	CPC  R31,R26
000182 f429      	BRNE _0x2D
                 ; 0000 0120 PORTA = hexvalue[(alarm_min/10)%10];
000183 91a0 0204 	LDS  R26,_alarm_min
000185 d082      	RCALL SUBOPT_0x6
                 ; 0000 0121 //DigitTo7SegEncoder((seconds/10)%10,commonn);
                 ; 0000 0122 PORTC=0b00001000;
000186 e0e8      	LDI  R30,LOW(8)
000187 c011      	RJMP _0x3E
                 ; 0000 0123 break;
                 ; 0000 0124 case 5:
                 _0x2D:
000188 30e5      	CPI  R30,LOW(0x5)
000189 e0a0      	LDI  R26,HIGH(0x5)
00018a 07fa      	CPC  R31,R26
00018b f429      	BRNE _0x2E
                 ; 0000 0125 PORTA = hexvalue[alarm_hr%10];
00018c 91a0 0203 	LDS  R26,_alarm_hr
00018e d070      	RCALL SUBOPT_0x5
                 ; 0000 0126 //DigitTo7SegEncoder((seconds/10)%10,commonn);
                 ; 0000 0127 PORTC=0b00010000;
00018f e1e0      	LDI  R30,LOW(16)
000190 c008      	RJMP _0x3E
                 ; 0000 0128 break;
                 ; 0000 0129 case 6:
                 _0x2E:
000191 30e6      	CPI  R30,LOW(0x6)
000192 e0a0      	LDI  R26,HIGH(0x6)
000193 07fa      	CPC  R31,R26
000194 f429      	BRNE _0x29
                 ; 0000 012A PORTA = hexvalue[(alarm_hr/10)%10];
000195 91a0 0203 	LDS  R26,_alarm_hr
000197 d070      	RCALL SUBOPT_0x6
                 ; 0000 012B //DigitTo7SegEncoder((seconds/10)%10,commonn);
                 ; 0000 012C PORTC=0b00100000;
000198 e2e0      	LDI  R30,LOW(32)
                 _0x3E:
000199 b9e8      	OUT  0x8,R30
                 ; 0000 012D break;
                 ; 0000 012E 
                 ; 0000 012F }
                 _0x29:
                 ; 0000 0130 current_digit = (current_digit % 7) + 1;
                 _0x3D:
                +
00019a 2da7     +MOV R26 , R7
00019b 2db8     +MOV R27 , R8
                 	__GETW2R 7,8
00019c e0e7      	LDI  R30,LOW(7)
00019d e0f0      	LDI  R31,HIGH(7)
00019e d09c      	RCALL __MODW21
00019f 9631      	ADIW R30,1
                +
0001a0 2e7e     +MOV R7 , R30
0001a1 2e8f     +MOV R8 , R31
                 	__PUTW1R 7,8
                 ; 0000 0131 
                 ; 0000 0132 
                 ; 0000 0133 
                 ; 0000 0134 }
                 ; 0000 0135 
                 ; 0000 0136 }
0001a2 91e9      	LD   R30,Y+
0001a3 bfef      	OUT  SREG,R30
0001a4 91f9      	LD   R31,Y+
0001a5 91e9      	LD   R30,Y+
0001a6 91b9      	LD   R27,Y+
0001a7 91a9      	LD   R26,Y+
0001a8 9199      	LD   R25,Y+
0001a9 9189      	LD   R24,Y+
0001aa 9179      	LD   R23,Y+
0001ab 9169      	LD   R22,Y+
0001ac 90f9      	LD   R15,Y+
0001ad 9019      	LD   R1,Y+
0001ae 9009      	LD   R0,Y+
0001af 9518      	RETI
                 ; .FEND
                 ;void DELAY_ms(unsigned int ms_count)
                 ; 0000 013A {
                 ; 0000 013B unsigned int i,j;
                 ; 0000 013C for(i=0; i<ms_count; i++)
                 ;	ms_count -> R20,R21
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ; 0000 013D 
                 ; 0000 013E {
                 ; 0000 013F for(j=0;j<1000; j++);
                 ; 0000 0140 }
                 ; 0000 0141 }
                 ;void DELAY_us(unsigned int us_count)
                 ; 0000 0143 {
                 _DELAY_us:
                 ; .FSTART _DELAY_us
                 ; 0000 0144 unsigned int i1;
                 ; 0000 0145 for(i1=0; i1<us_count; i1++);
0001b0 d064      	RCALL __SAVELOCR4
0001b1 019d      	MOVW R18,R26
                 ;	us_count -> R18,R19
                 ;	i1 -> R16,R17
                +
0001b2 e000     +LDI R16 , LOW ( 0 )
0001b3 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x37:
                +
0001b4 1702     +CP R16 , R18
0001b5 0713     +CPC R17 , R19
                 	__CPWRR 16,17,18,19
0001b6 f418      	BRSH _0x38
                +
0001b7 5f0f     +SUBI R16 , LOW ( - 1 )
0001b8 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0001b9 cffa      	RJMP _0x37
                 _0x38:
                 ; 0000 0146 
                 ; 0000 0147 
                 ; 0000 0148 }
0001ba d05f      	RCALL __LOADLOCR4
0001bb 9624      	ADIW R28,4
0001bc 9508      	RET
                 ; .FEND
                 ;interrupt [14] void timer1_ovf_isr(void)
                 ; 0000 014D {
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
0001bd 93aa      	ST   -Y,R26
0001be 93ea      	ST   -Y,R30
0001bf b7ef      	IN   R30,SREG
0001c0 93ea      	ST   -Y,R30
                 ; 0000 014E 
                 ; 0000 014F seconds++;
0001c1 91e0 0200 	LDS  R30,_seconds
0001c3 5fef      	SUBI R30,-LOW(1)
0001c4 93e0 0200 	STS  _seconds,R30
                 ; 0000 0150 
                 ; 0000 0151 if(seconds>=60)
0001c6 91a0 0200 	LDS  R26,_seconds
0001c8 33ac      	CPI  R26,LOW(0x3C)
0001c9 f020      	BRLO _0x39
                 ; 0000 0152 {
                 ; 0000 0153 minutes++;
0001ca d01c      	RCALL SUBOPT_0x1
                 ; 0000 0154 seconds=0;
0001cb e0e0      	LDI  R30,LOW(0)
0001cc 93e0 0200 	STS  _seconds,R30
                 ; 0000 0155 
                 ; 0000 0156 }
                 ; 0000 0157 if(minutes>=60)
                 _0x39:
0001ce 91a0 0201 	LDS  R26,_minutes
0001d0 33ac      	CPI  R26,LOW(0x3C)
0001d1 f020      	BRLO _0x3A
                 ; 0000 0158 {
                 ; 0000 0159 hours++;
0001d2 d01a      	RCALL SUBOPT_0x2
                 ; 0000 015A minutes=0;
0001d3 e0e0      	LDI  R30,LOW(0)
0001d4 93e0 0201 	STS  _minutes,R30
                 ; 0000 015B 
                 ; 0000 015C }
                 ; 0000 015D if(hours>23)
                 _0x3A:
0001d6 91a0 0202 	LDS  R26,_hours
0001d8 31a8      	CPI  R26,LOW(0x18)
0001d9 f018      	BRLO _0x3B
                 ; 0000 015E {
                 ; 0000 015F hours=0;
0001da e0e0      	LDI  R30,LOW(0)
0001db 93e0 0202 	STS  _hours,R30
                 ; 0000 0160 //minutes=0;
                 ; 0000 0161 //seconds=0;
                 ; 0000 0162 
                 ; 0000 0163 }
                 ; 0000 0164 
                 ; 0000 0165 
                 ; 0000 0166 }
                 _0x3B:
0001dd 91e9      	LD   R30,Y+
0001de bfef      	OUT  SREG,R30
0001df 91e9      	LD   R30,Y+
0001e0 91a9      	LD   R26,Y+
0001e1 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _seconds:
000200           	.BYTE 0x1
                 _minutes:
000201           	.BYTE 0x1
                 _hours:
000202           	.BYTE 0x1
                 _alarm_hr:
000203           	.BYTE 0x1
                 _alarm_min:
000204           	.BYTE 0x1
                 _alarm_sec:
000205           	.BYTE 0x1
                 _alarm:
000206           	.BYTE 0x1
                 _hexvalue:
000207           	.BYTE 0xA
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
                +
0001e2 23ee     +TST R30
0001e3 e0e1     +LDI R30 , 1
0001e4 f009     +BREQ PC + 2
0001e5 27ee     +CLR R30
                 	__LNEGB1
0001e6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
0001e7 91e0 0201 	LDS  R30,_minutes
0001e9 5fef      	SUBI R30,-LOW(1)
0001ea 93e0 0201 	STS  _minutes,R30
0001ec 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x2:
0001ed 91e0 0202 	LDS  R30,_hours
0001ef 5fef      	SUBI R30,-LOW(1)
0001f0 93e0 0202 	STS  _hours,R30
0001f2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
0001f3 91e0 0203 	LDS  R30,_alarm_hr
0001f5 5fef      	SUBI R30,-LOW(1)
0001f6 93e0 0203 	STS  _alarm_hr,R30
0001f8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
                +
0001f9 2de7     +MOV R30 , R7
0001fa 2df8     +MOV R31 , R8
                 	__GETW1R 7,8
0001fb 30e1      	CPI  R30,LOW(0x1)
0001fc e0a0      	LDI  R26,HIGH(0x1)
0001fd 07fa      	CPC  R31,R26
0001fe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x5:
0001ff 27bb      	CLR  R27
000200 e0ea      	LDI  R30,LOW(10)
000201 e0f0      	LDI  R31,HIGH(10)
000202 d038      	RCALL __MODW21
000203 5fe9      	SUBI R30,LOW(-_hexvalue)
000204 4ffd      	SBCI R31,HIGH(-_hexvalue)
000205 81e0      	LD   R30,Z
000206 b9e2      	OUT  0x2,R30
000207 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:53 WORDS
                 SUBOPT_0x6:
000208 e0b0      	LDI  R27,0
000209 e0ea      	LDI  R30,LOW(10)
00020a e0f0      	LDI  R31,HIGH(10)
00020b d02a      	RCALL __DIVW21
00020c 01df      	MOVW R26,R30
00020d e0ea      	LDI  R30,LOW(10)
00020e e0f0      	LDI  R31,HIGH(10)
00020f d02b      	RCALL __MODW21
000210 5fe9      	SUBI R30,LOW(-_hexvalue)
000211 4ffd      	SBCI R31,HIGH(-_hexvalue)
000212 81e0      	LD   R30,Z
000213 b9e2      	OUT  0x2,R30
000214 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR4:
000215 933a      	ST   -Y,R19
                 __SAVELOCR3:
000216 932a      	ST   -Y,R18
                 __SAVELOCR2:
000217 931a      	ST   -Y,R17
000218 930a      	ST   -Y,R16
000219 9508      	RET
                 
                 __LOADLOCR4:
00021a 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00021b 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00021c 8119      	LDD  R17,Y+1
00021d 8108      	LD   R16,Y
00021e 9508      	RET
                 
                 __ANEGW1:
00021f 95f1      	NEG  R31
000220 95e1      	NEG  R30
000221 40f0      	SBCI R31,0
000222 9508      	RET
                 
                 __DIVW21U:
000223 2400      	CLR  R0
000224 2411      	CLR  R1
000225 e190      	LDI  R25,16
                 __DIVW21U1:
000226 0faa      	LSL  R26
000227 1fbb      	ROL  R27
000228 1c00      	ROL  R0
000229 1c11      	ROL  R1
00022a 1a0e      	SUB  R0,R30
00022b 0a1f      	SBC  R1,R31
00022c f418      	BRCC __DIVW21U2
00022d 0e0e      	ADD  R0,R30
00022e 1e1f      	ADC  R1,R31
00022f c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000230 60a1      	SBR  R26,1
                 __DIVW21U3:
000231 959a      	DEC  R25
000232 f799      	BRNE __DIVW21U1
000233 01fd      	MOVW R30,R26
000234 01d0      	MOVW R26,R0
000235 9508      	RET
                 
                 __DIVW21:
000236 d012      	RCALL __CHKSIGNW
000237 dfeb      	RCALL __DIVW21U
000238 f40e      	BRTC __DIVW211
000239 dfe5      	RCALL __ANEGW1
                 __DIVW211:
00023a 9508      	RET
                 
                 __MODW21:
00023b 94e8      	CLT
00023c ffb7      	SBRS R27,7
00023d c004      	RJMP __MODW211
00023e 95b1      	NEG  R27
00023f 95a1      	NEG  R26
000240 40b0      	SBCI R27,0
000241 9468      	SET
                 __MODW211:
000242 fdf7      	SBRC R31,7
000243 dfdb      	RCALL __ANEGW1
000244 dfde      	RCALL __DIVW21U
000245 01fd      	MOVW R30,R26
000246 f40e      	BRTC __MODW212
000247 dfd7      	RCALL __ANEGW1
                 __MODW212:
000248 9508      	RET
                 
                 __CHKSIGNW:
000249 94e8      	CLT
00024a fff7      	SBRS R31,7
00024b c002      	RJMP __CHKSW1
00024c dfd2      	RCALL __ANEGW1
00024d 9468      	SET
                 __CHKSW1:
00024e ffb7      	SBRS R27,7
00024f c006      	RJMP __CHKSW2
000250 95b1      	NEG  R27
000251 95a1      	NEG  R26
000252 40b0      	SBCI R27,0
000253 f800      	BLD  R0,0
000254 9403      	INC  R0
000255 fa00      	BST  R0,0
                 __CHKSW2:
000256 9508      	RET
                 
                 _delay_ms:
000257 9610      	adiw r26,0
000258 f039      	breq __delay_ms1
                 __delay_ms0:
000259 95a8      	wdr
                +
00025a ed80     +LDI R24 , LOW ( 0x7D0 )
00025b e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00025c 9701     +SBIW R24 , 1
00025d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00025e 9711      	sbiw r26,1
00025f f7c9      	brne __delay_ms0
                 __delay_ms1:
000260 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega164A register use summary:
r0 :  14 r1 :   7 r2 :   0 r3 :   3 r4 :   3 r5 :   0 r6 :   4 r7 :   3 
r8 :   3 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   5 r17:   5 r18:   4 r19:   3 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  11 r25:   7 r26:  74 r27:  20 r28:   2 r29:   1 r30: 160 r31:  30 
x  :   3 y  :  38 z  :   9 
Registers used: 25 out of 35 (71.4%)

ATmega164A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   3 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   3 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 
brlt  :   0 brmi  :   0 brne  :  23 brpl  :   0 brsh  :   1 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   0 
cbi   :   1 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   8 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   0 
cp    :   1 cpc   :  12 cpi   :  19 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   1 jmp   :  32 ld    :  18 ldd   :   3 ldi   :  91 
lds   :  26 lpm   :   7 lsl   :   1 lsr   :   0 mov   :  10 movw  :   8 
mul   :   0 muls  :   0 mulsu :   0 neg   :   6 nop   :   0 or    :   0 
ori   :   0 out   :  27 pop   :   0 push  :   0 rcall :  43 ret   :  18 
reti  :   2 rjmp  :  29 rol   :   3 ror   :   0 sbc   :   1 sbci  :   6 
sbi   :   1 sbic  :   6 sbis  :   2 sbiw  :   5 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  22 std   :   0 sts   :  27 sub   :   1 subi  :   8 swap  :   0 
tst   :   5 wdr   :   1 
Instructions used: 54 out of 116 (46.6%)

ATmega164A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0004c2   1190     28   1218   16384   7.4%
[.dseg] 0x000100 0x000211      0     17     17    1024   1.7%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 5 warnings
